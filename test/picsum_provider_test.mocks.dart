// Mocks generated by Mockito 5.4.2 from annotations
// in image_viewer/test/picsum_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:image_viewer/models/picsum_model.dart' as _i4;
import 'package:image_viewer/provider/picsum_image_provider.dart' as _i3;
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePagingState_0<PageKeyType, ItemType> extends _i1.SmartFake
    implements _i2.PagingState<PageKeyType, ItemType> {
  _FakePagingState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePagingController_1<PageKeyType, ItemType> extends _i1.SmartFake
    implements _i2.PagingController<PageKeyType, ItemType> {
  _FakePagingController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PicsumImageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPicsumImageProvider extends _i1.Mock
    implements _i3.PicsumImageProvider {
  @override
  set originalPicsumPayload(_i4.PicsumPayload? _originalPicsumPayload) =>
      super.noSuchMethod(
        Invocation.setter(
          #originalPicsumPayload,
          _originalPicsumPayload,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set pageState(_i3.PageState? _pageState) => super.noSuchMethod(
        Invocation.setter(
          #pageState,
          _pageState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.PagingState<dynamic, dynamic> get pagingState => (super.noSuchMethod(
        Invocation.getter(#pagingState),
        returnValue: _FakePagingState_0<dynamic, dynamic>(
          this,
          Invocation.getter(#pagingState),
        ),
        returnValueForMissingStub: _FakePagingState_0<dynamic, dynamic>(
          this,
          Invocation.getter(#pagingState),
        ),
      ) as _i2.PagingState<dynamic, dynamic>);

  @override
  set pagingState(_i2.PagingState<dynamic, dynamic>? _pagingState) =>
      super.noSuchMethod(
        Invocation.setter(
          #pagingState,
          _pagingState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.PagingController<int, _i4.PicsumImage> get pagingController =>
      (super.noSuchMethod(
        Invocation.getter(#pagingController),
        returnValue: _FakePagingController_1<int, _i4.PicsumImage>(
          this,
          Invocation.getter(#pagingController),
        ),
        returnValueForMissingStub:
            _FakePagingController_1<int, _i4.PicsumImage>(
          this,
          Invocation.getter(#pagingController),
        ),
      ) as _i2.PagingController<int, _i4.PicsumImage>);

  @override
  int get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set currentPage(int? _currentPage) => super.noSuchMethod(
        Invocation.setter(
          #currentPage,
          _currentPage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isPaginationEnd => (super.noSuchMethod(
        Invocation.getter(#isPaginationEnd),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isPaginationEnd(bool? _isPaginationEnd) => super.noSuchMethod(
        Invocation.setter(
          #isPaginationEnd,
          _isPaginationEnd,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ChildLoaded get childLoaded => (super.noSuchMethod(
        Invocation.getter(#childLoaded),
        returnValue: _i3.ChildLoaded.Loaded,
        returnValueForMissingStub: _i3.ChildLoaded.Loaded,
      ) as _i3.ChildLoaded);

  @override
  set childLoaded(_i3.ChildLoaded? _childLoaded) => super.noSuchMethod(
        Invocation.setter(
          #childLoaded,
          _childLoaded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedImage(_i4.PicsumImage? _selectedImage) => super.noSuchMethod(
        Invocation.setter(
          #selectedImage,
          _selectedImage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic searchQuery(String? searchQuery) => super.noSuchMethod(
        Invocation.method(
          #searchQuery,
          [searchQuery],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic onTapImage(int? idx) => super.noSuchMethod(
        Invocation.method(
          #onTapImage,
          [idx],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
